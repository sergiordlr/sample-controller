/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
	v1alpha1 "k8s.io/sample-controller/pkg/apis/samplecontroller/v1alpha1"
	scheme "k8s.io/sample-controller/pkg/generated/clientset/versioned/scheme"
)

// DeployCustomsGetter has a method to return a DeployCustomInterface.
// A group's client should implement this interface.
type DeployCustomsGetter interface {
	DeployCustoms(namespace string) DeployCustomInterface
}

// DeployCustomInterface has methods to work with DeployCustom resources.
type DeployCustomInterface interface {
	Create(*v1alpha1.DeployCustom) (*v1alpha1.DeployCustom, error)
	Update(*v1alpha1.DeployCustom) (*v1alpha1.DeployCustom, error)
	UpdateStatus(*v1alpha1.DeployCustom) (*v1alpha1.DeployCustom, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.DeployCustom, error)
	List(opts v1.ListOptions) (*v1alpha1.DeployCustomList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.DeployCustom, err error)
	DeployCustomExpansion
}

// deployCustoms implements DeployCustomInterface
type deployCustoms struct {
	client rest.Interface
	ns     string
}

// newDeployCustoms returns a DeployCustoms
func newDeployCustoms(c *SamplecontrollerV1alpha1Client, namespace string) *deployCustoms {
	return &deployCustoms{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the deployCustom, and returns the corresponding deployCustom object, and an error if there is any.
func (c *deployCustoms) Get(name string, options v1.GetOptions) (result *v1alpha1.DeployCustom, err error) {
	result = &v1alpha1.DeployCustom{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("deploycustoms").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of DeployCustoms that match those selectors.
func (c *deployCustoms) List(opts v1.ListOptions) (result *v1alpha1.DeployCustomList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.DeployCustomList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("deploycustoms").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested deployCustoms.
func (c *deployCustoms) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("deploycustoms").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a deployCustom and creates it.  Returns the server's representation of the deployCustom, and an error, if there is any.
func (c *deployCustoms) Create(deployCustom *v1alpha1.DeployCustom) (result *v1alpha1.DeployCustom, err error) {
	result = &v1alpha1.DeployCustom{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("deploycustoms").
		Body(deployCustom).
		Do().
		Into(result)
	return
}

// Update takes the representation of a deployCustom and updates it. Returns the server's representation of the deployCustom, and an error, if there is any.
func (c *deployCustoms) Update(deployCustom *v1alpha1.DeployCustom) (result *v1alpha1.DeployCustom, err error) {
	result = &v1alpha1.DeployCustom{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("deploycustoms").
		Name(deployCustom.Name).
		Body(deployCustom).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *deployCustoms) UpdateStatus(deployCustom *v1alpha1.DeployCustom) (result *v1alpha1.DeployCustom, err error) {
	result = &v1alpha1.DeployCustom{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("deploycustoms").
		Name(deployCustom.Name).
		SubResource("status").
		Body(deployCustom).
		Do().
		Into(result)
	return
}

// Delete takes name of the deployCustom and deletes it. Returns an error if one occurs.
func (c *deployCustoms) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("deploycustoms").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *deployCustoms) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("deploycustoms").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched deployCustom.
func (c *deployCustoms) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.DeployCustom, err error) {
	result = &v1alpha1.DeployCustom{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("deploycustoms").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
